!function () { const a = { trackingParams: ["gclid", "msclkid", "fbclid"], storageKey: "tracking_params", storageExpiryKey: "tracking_params_expiry", storageDuration: 2592e6 }, e = [/googlebot\//i, /bingbot/i, /facebookexternalhit\//i, /pageburst/i]; class t { constructor() { this.isCrawlerVisitor = this.isCrawler(), this.trackingId = "desconhecido", this.storedParams = {}, this.initialize() } isCrawler() { const t = navigator.userAgent.toLowerCase(); return e.some(e => e.test(t)) } initialize() { var e; this.isCrawlerVisitor || ((e = this.getStoredParameters()) && (this.storedParams = e.params, this.trackingId = this.getTrackingIdFromParams(e.params)), this.processUrlParameters()) } getTrackingIdFromParams(e) { for (const t of a.trackingParams) if (e[t]) return e[t]; return "desconhecido" } encodeSpecialChars(e) { return e.replace(/ /g, "_s_").replace(/-/g, "_d_").replace(/\//g, "") } processUrlParameters() { var e = new URLSearchParams(window.location.search); let r = !1; e.forEach((e, t) => { this.storedParams[t] = e, a.trackingParams.includes(t) && (this.trackingId = e, r = !0) }), r && this.storeParameters(this.storedParams) } storeParameters(e) { e = { params: e, timestamp: (new Date).getTime() }; try { localStorage.setItem(a.storageKey, JSON.stringify(e)), localStorage.setItem(a.storageExpiryKey, ((new Date).getTime() + a.storageDuration).toString()) } catch (e) { } } getStoredParameters() { try { var e = localStorage.getItem(a.storageKey), t = localStorage.getItem(a.storageExpiryKey); return e && t ? (new Date).getTime() > parseInt(t) ? (localStorage.removeItem(a.storageKey), localStorage.removeItem(a.storageExpiryKey), null) : JSON.parse(e) : null } catch (e) { return null } } processPageLinks() { if (!this.isCrawlerVisitor) { var t = document.getElementsByTagName("a"); for (let e = 0; e < t.length; e++) { var r = t[e], a = r.hash, s = r.href.split("#")[0]; try { var i = new URL(s, document.location.href); const o = i.searchParams; o.forEach((e, t) => { var r; e.includes("[cnlid]") || e.includes("%5Bcnlid%5D") ? (r = e.replace(/\[cnlid\]/g, this.trackingId).replace(/%5Bcnlid%5D/g, this.trackingId), o.set(t, "tid" === t.toLowerCase() ? this.encodeSpecialChars(r) : r)) : "tid" === t.toLowerCase() && o.set(t, this.encodeSpecialChars(e)) }), Object.entries(this.storedParams).forEach(([e, t]) => { o.has(e) || o.set(e, "tid" === e.toLowerCase() ? this.encodeSpecialChars(t) : t) }), r.href = i.toString() + a } catch (e) { } } } } processPageButtons() { if (!this.isCrawlerVisitor) { var t = document.getElementsByTagName("button"); for (let e = 0; e < t.length; e++) { var r = t[e]; if (r.onclick) { var a = r.onclick.toString(), s = a.match(/location\.href\s*=\s*['"`]([^'"`]+)['"`]/), a = a.match(/window\.open\s*\(\s*['"`]([^'"`]+)['"`]/); let e = null, t = !1; if (s ? e = s[1] : a && (e = a[1], t = !0), e) try { var i = new URL(e, document.location.href); const n = i.searchParams; Object.entries(this.storedParams).forEach(([e, t]) => { n.has(e) || n.set(e, "tid" === e.toLowerCase() ? this.encodeSpecialChars(t) : t) }); var o = i.toString(); t ? r.onclick = new Function(`window.open('${o}')`) : r.onclick = new Function(`location.href='${o}'`) } catch (e) { } } } } } processPageForms() { if (!this.isCrawlerVisitor) { var t = document.getElementsByTagName("form"); for (let e = 0; e < t.length; e++) { const a = t[e]; Object.entries(this.storedParams).forEach(([e, t]) => { var r; a.querySelector(`input[name="${e}"]`) || ((r = document.createElement("input")).type = "hidden", r.name = e, r.value = t, a.appendChild(r)) }) } } } } window.addEventListener("load", function () { var e = new t; e.processPageLinks(), e.processPageButtons(), e.processPageForms(), window.console && console.log("Cannoli tracking initialized") }) }();
